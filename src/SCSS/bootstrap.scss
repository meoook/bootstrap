// @mixin grid-generator($size, $grid-columns) {
// 	@for $i from 1 through $grid-columns {
// 		.col-#{$size}-#{$i}-#{$grid-columns} {
//       width: percentage($i / $grid-columns);
//       flex: 0 0 percentage($i / $grid-columns);
// 		}
// 	}
// }

// @mixin respond-from($media) {
// 	@if $media == xs {
// 		@media (min-width: 0px)  { @content; }
// 	} @else if $media == sm {
// 		@media (min-width: 768px) { @content; }
// 	} @else if $media == md {
// 		@media (min-width: 1200) { @content; }
// 	} @else if $media == lg {
// 		@media (min-width: 1440) { @content; }
// 	} @else if $media == xl {
// 		@media (min-width: 1800) { @content; }
// 	}
// }
@mixin grid-generator($grid-columns) {
  @for $i from 1 through $grid-columns {
    .col-#{$i} {
      // width: percentage($i / $grid-columns);
      flex: 0 0 percentage($i / $grid-columns);
    }
  }
}

.row,
.column {
  display: flex;
  &.long {
    flex-wrap: wrap;
  }
  &.justify {
    justify-content: space-between;
  }
  &.around {
    justify-content: space-around;
  }
  &.center {
    align-items: center;
  }
}
.row {
  flex-direction: row;
}
.column {
  flex-direction: column;
}
.col {
  // width: 100%;
  flex: 1 0;
}
@include grid-generator(12);
.btn,
.input {
  svg {
    height: 1.2em;
    width: 1.2em;
  }
}
.btn {
  @extend %shadow-light;
  @extend %shadow-light-text;
  @extend %bd;
  @extend %disabled-bg;
  @include colors($input, true);
  @include colors-all;
  position: relative;
  display: inline-flex;
  justify-content: space-around;
  align-items: center;
  text-align: center;
  min-width: 100px;
  padding: $padding / 2 $padding;
  color: $texth;
  font-weight: bold;
  letter-spacing: 1px;
  white-space: nowrap;
  cursor: pointer;
  transition: all $timer;
  transform: perspective(100px) translateZ(0px);
  &:hover {
    transform: perspective(100px) translateZ(2px);
  }
  &:active {
    transform: perspective(100px) translateZ(-1px);
  }
  svg {
    &:first-child {
      margin-right: $padding / 2;
    }
    &:last-child {
      margin-left: $padding / 2;
    }
  }
  &.big {
    font-size: $font-s + $indent;
    min-width: 120px;
    padding: $padding $padding * 2;
  }
  &.small {
    font-size: $font-s - $indent / 2;
    min-width: 80px;
    padding: $padding/4 $padding / 2;
  }
  &-nop {
    min-width: 1.5em !important;
  }
  &-ico {
    min-width: 1.2em !important;
    width: 2em !important;
    height: 2em !important;
    padding: 2px !important;
    border-radius: 50%;
    border-width: 0;
    background-color: transparent;
    transform: none !important;
    box-shadow: none;
    transition: background-color $timer / 2 cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    overflow: visible;
    &:hover {
      background-color: rgba($texth, 0.06);
    }
  }
}

.control {
  &-group {
    display: flex;
    align-items: stretch;
    border-radius: $radius;
    & > * {
      border: $bd solid rgba($texth, 0.15);
      border-radius: 0;
      border-width: $bd;
      padding: $padding / 2 $padding;
      line-height: normal;
      transform: none !important;
      min-width: unset;
    }
    & > *:not(button) {
      background: $elem;
      color: $texth;
    }
    & > *:not(:first-child) {
      border-left-width: 0;
    }
    & > *:first-child {
      border-top-left-radius: inherit;
      border-bottom-left-radius: inherit;
    }
    & > *:last-child {
      border-top-right-radius: inherit;
      border-bottom-right-radius: inherit;
    }
    &.big {
      font-size: $font-s + $indent;
      & > * {
        padding: $padding $padding * 2;
      }
    }
    &.small {
      font-size: $font-s - $indent / 2;
      & > * {
        padding: $padding / 4 $padding/ 2;
      }
    }
  }
}

.card {
  &-grid {
    display: grid;
    grid-gap: 20px;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  }
}
